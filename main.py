import re
import os
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from docxtpl import DocxTemplate
from docx import Document


class DocumentGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Word-–¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤")
        self.root.geometry("750x650")

        self.template_path = ""
        self.fields = {}

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(
            root,
            text="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤",
            font=("SF Pro Display", 18, "bold")
        ).pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É —à–∞–±–ª–æ–Ω—É
        ttk.Button(
            root, text="üìÇ –û–±—Ä–∞—Ç–∏ —à–∞–±–ª–æ–Ω (.docx)",
            command=self.load_template
        ).pack(pady=5)

        self.template_label = ttk.Label(
            root, text="–®–∞–±–ª–æ–Ω –Ω–µ –æ–±—Ä–∞–Ω–æ", foreground="gray"
        )
        self.template_label.pack()

        # –†–∞–º–∫–∞ –¥–ª—è –ø–æ–ª—ñ–≤
        self.fields_frame = ttk.Frame(root)
        self.fields_frame.pack(fill="both", expand=True, pady=10)

        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞
        ttk.Button(
            root, text="üìù –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç",
            command=self.generate_doc
        ).pack(pady=10)

    # ------------------------- #
    #   –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ —à–∞–±–ª–æ–Ω—É
    # ------------------------- #
    def extract_variables(self, path):
        doc_tpl = DocxTemplate(path)
        docx = doc_tpl.get_docx()
        variables = set()

        def extract_from_paragraphs(paragraphs):
            text = "\n".join(p.text for p in paragraphs)
            found = re.findall(r"{{\s*([^{}]+?)\s*}}", text)
            variables.update(found)

        # 1Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
        extract_from_paragraphs(docx.paragraphs)

        # 2Ô∏è‚É£ –¢–∞–±–ª–∏—Ü—ñ (–≤–∫–ª—é—á–Ω–æ –∑ –≤–∫–ª–∞–¥–µ–Ω–∏–º–∏)
        def extract_from_table(table):
            for row in table.rows:
                for cell in row.cells:
                    extract_from_paragraphs(cell.paragraphs)
                    for inner_table in cell.tables:
                        extract_from_table(inner_table)

        for table in docx.tables:
            extract_from_table(table)

        # 3Ô∏è‚É£ –•–µ–¥–µ—Ä–∏ —Ç–∞ —Ñ—É—Ç–µ—Ä–∏
        for section in docx.sections:
            extract_from_paragraphs(section.header.paragraphs)
            extract_from_paragraphs(section.footer.paragraphs)

            # –Ø–∫—â–æ —î —Ç–∞–±–ª–∏—Ü—ñ —É —Ö–µ–¥–µ—Ä–∞—Ö —á–∏ —Ñ—É—Ç–µ—Ä–∞—Ö
            for table in section.header.tables:
                extract_from_table(table)
            for table in section.footer.tables:
                extract_from_table(table)

        return sorted(variables)

    # ------------------------- #
    #   –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É
    # ------------------------- #
    def load_template(self):
        path = filedialog.askopenfilename(filetypes=[("Word files", "*.docx")])
        if not path:
            return
        self.template_path = path
        self.template_label.config(text=os.path.basename(path), foreground="black")

        # –ó—á–∏—Ç—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ —à–∞–±–ª–æ–Ω—É
        vars_found = self.extract_variables(path)
        self.show_fields(vars_found)

    # ------------------------- #
    #   –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–ª—ñ–≤
    # ------------------------- #
    def show_fields(self, vars_list):
        for widget in self.fields_frame.winfo_children():
            widget.destroy()
        self.fields.clear()

        if not vars_list:
            ttk.Label(self.fields_frame, text="‚ùå –£ —à–∞–±–ª–æ–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω–∏—Ö").pack()
            return

        ttk.Label(
            self.fields_frame,
            text="–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö:",
            font=("SF Pro Display", 14)
        ).pack(pady=5)

        for var in vars_list:
            frame = ttk.Frame(self.fields_frame)
            frame.pack(fill="x", pady=3, padx=20)
            ttk.Label(frame, text=f"{var}:", width=30, anchor="w").pack(side="left")
            entry = ttk.Entry(frame, width=40)
            entry.pack(side="right", fill="x", expand=True)
            self.fields[var] = entry

    # ------------------------- #
    #   –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    # ------------------------- #
    def generate_doc(self):
        if not self.template_path:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω!")
            return

        context = {key: entry.get() for key, entry in self.fields.items()}

        try:
            doc = DocxTemplate(self.template_path)
            doc.render(context)

            # üóÇÔ∏è –í–∏–±—ñ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
            save_dir = filedialog.askdirectory(title="–û–±–µ—Ä—ñ—Ç—å –ø–∞–ø–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
            if not save_dir:
                return

            base_name = (
                context.get("–Ω–∞–∑–≤–∞_–ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞")
                or context.get("–Ω–∞–∑–≤–∞_–∫–æ–º–ø–∞–Ω—ñ—ó")
                or "–¥–æ–∫—É–º–µ–Ω—Ç"
            )

            safe_name = "".join(c if c.isalnum() or c in " _-" else "_" for c in base_name)
            filename = f"–†—ñ—à–µ–Ω–Ω—è_–û–û–í_{safe_name}.docx"
            output_path = os.path.join(save_dir, filename)

            doc.save(output_path)
            messagebox.showinfo("‚úÖ –£—Å–ø—ñ—Ö", f"–î–æ–∫—É–º–µ–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ:\n{output_path}")

        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞", str(e))


# ------------------------- #
#           –ó–∞–ø—É—Å–∫
# ------------------------- #
if __name__ == "__main__":
    root = tk.Tk()
    app = DocumentGeneratorApp(root)
    root.mainloop()
